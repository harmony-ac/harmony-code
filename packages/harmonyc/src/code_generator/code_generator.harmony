+ Vitest
  + action only:
    + step | hello
      =>
      | const T = new TestPhrases(context);
      | (context.task.meta.phrases.push("hello"),
      | await T.When_hello());

  + action and response:
    + step | hello => "Hello!"
      =>
      | const T = new TestPhrases(context);
      | const r =
      |   (context.task.meta.phrases.push("hello"),
      |   await T.When_hello());
      |   (context.task.meta.phrases.push("=> \"Hello!\""),
      |   await T.Then_("Hello!", r));

  + save to variable:
    + step | hello => ${greeting}
      =>
      | const T = new TestPhrases(context);
      | const r =
      |   (context.task.meta.phrases.push("hello"),
      |   await T.When_hello());
      |   (context.task.meta.variables ??= {})["greeting"] = r;
      => "${greeting}" is "Hello!"

  + save response to variable:
    + step | hello => last char ${ch}
      =>
      | const T = new TestPhrases(context);
      | const r =
      |   (context.task.meta.phrases.push("hello"),
      |   await T.When_hello());
      |   (context.task.meta.phrases.push("=> last char ${ch}"),
      |   (context.task.meta.variables ??= {})["ch"] =
      |   await T.Then_last_char(r));
      => "${ch}" is "!"
    + with empty action:
      - step | hello
      - step | => last char of greeting ${ch}
        =>
        | const T = new TestPhrases(context);
        | (context.task.meta.phrases.push("hello"),
        | await T.When_hello());
        | (context.task.meta.phrases.push("=> last char of greeting ${ch}"),
        | (context.task.meta.variables ??= {})["ch"] =
        | await T.Then_last_char_of_greeting());
        => "${ch}" is "!"

  + error response:
    + step | goodbye => !!
      =>
        | const T = new TestPhrases(context);
        | await expect(async () => {
        |   (context.task.meta.phrases.push("goodbye"),
        |   await T.When_goodbye());
        | }).rejects._harmony_that((e) => {
        |   context.task.meta.phrases.push("=> !!");
        |   expect(e).toThrow();
        | });

  + error response:
    + step | goodbye => !! | World
      =>
        | const T = new TestPhrases(context);
        | await expect(async () => {
        |   (context.task.meta.phrases.push("goodbye"),
        |   await T.When_goodbye());
        | }).rejects._harmony_that((e) => {
        |   context.task.meta.phrases.push("=> !! \"World\"");
        |   expect(e).toThrow("World");
        | });

  + named error response:
    + step | goodbye => !! problem
      => | const T = new TestPhrases(context);
         | await expect(async () => {
         |   (context.task.meta.phrases.push("goodbye"),
         |   await T.When_goodbye());
         | }).rejects._harmony_that((e) => {
         |   context.task.meta.phrases.push("=> !! problem");
         |   expect(e)._harmony_that(async (e) => {
         |         try {
         |           (context.task.meta.phrases.push("=> !! problem"),
         |           await T.Error_problem(e))
         |         } catch {}
         |        });
         | });
  + retrieve variable in string:
    - step | ${name} "Jon" => "${name}" is "Jon"
    - step | greet "${name}"
      =>
      | const T = new TestPhrases(context);
      | const r =
      |   (context.task.meta.variables ??= {})["name"] = "Jon";
      |   (context.task.meta.phrases.push("=> \"${name}\" is \"Jon\""),
      |   await T.Then__is_(`${context.task.meta.variables?.["name"]}`, "Jon", r));
      | (context.task.meta.phrases.push("greet \"${name}\""),
      | await T.When_greet_(`${context.task.meta.variables?.["name"]}`));
      => greeting is "Hello, Jon!"

  + retrieve variable in code:
    + step | greet `${name}`
      =>
      | const T = new TestPhrases(context);
      | (context.task.meta.phrases.push("greet `${name}`"),
      | await T.When_greet_(context.task.meta.variables?.["name"]));

  + empty tree is todo:
    + tree ""
      =>
      | import { describe, test, expect } from "vitest";
      |
      | describe.todo("myFeature");
+ Vitest
  + action only:
    + step | hello
      =>
      | const T = new TestPhrases(context);
      | (context.task.meta.phrases.push("hello"),
      | await T.When_hello());

  + action and response:
    + step | hello => "Hello, World!"
      =>
      | const T = new TestPhrases(context);
      | const r =
      |   (context.task.meta.phrases.push("hello"),
      |   await T.When_hello());
      |   (context.task.meta.phrases.push("=> \"Hello, World!\""),
      |   await T.Then_("Hello, World!", r));

  + save to variable:
    + step | hello => ${greeting}
      =>
      | const T = new TestPhrases(context);
      | const r =
      |   (context.task.meta.phrases.push("hello"),
      |   await T.When_hello());
      |   (context.task.meta.variables ??= {})["greeting"] = r;

  + save response to variable:
    + step | hello => last char ${ch}
      =>
      | const T = new TestPhrases(context);
      | const r =
      |   (context.task.meta.phrases.push("hello"),
      |   await T.When_hello());
      |   (context.task.meta.phrases.push("=> last char ${ch}"),
      |   (context.task.meta.variables ??= {})["ch"] =
      |   await T.Then_last_char(r));

  + retrieve variable in string:
    + step | greet "${name}"
      =>
      | const T = new TestPhrases(context);
      | (context.task.meta.phrases.push("greet \"${name}\""),
      | await T.When_greet_(`${context.task.meta.variables?.["name"]}`));

  + retrieve variable in code:
    + step | greet `${name}`
      =>
      | const T = new TestPhrases(context);
      | (context.task.meta.phrases.push("greet `${name}`"),
      | await T.When_greet_(context.task.meta.variables?.["name"]));